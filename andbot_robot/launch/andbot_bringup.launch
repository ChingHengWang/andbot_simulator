<?xml version="1.0"?>

 <!--
 
   Created Or Edited on: 24/09/2015
   Author: Dott. Antonio Mauro Galiano
 	   antoniomauro.galiano@gmail.com

   -->

<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <!--<arg name="world_name" value="$(find andbot_robot)/worlds/my_world.world"/>-->
<!--    <arg name="world_name" value="$(find andbot_robot)/worlds/maze_static_h2.world"/>
-->
    <arg name="world_name" value="$(find andbot_robot)/worlds/test_zone.sdf"/>

    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>
  <!-- Load the URDF into the ROS Parameter Server -->

  <param name="robot_description"
	 command="$(find xacro)/xacro.py '$(find andbot_robot)/robot_description/urdf/andbot_ideal.xacro'" />
  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->

  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -model andbot -param robot_description"/>

  <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find andbot_robot)/robot_description/config/andbot.yaml" command="load"/>
  <!-- load the controllers -->

  <node name="controller_spawner"
    pkg="controller_manager"
    type="spawner" respawn="false"
    output="screen" ns="/andbot"
    args="joint_state_controller
      rightWheel_velocity_controller
      leftWheel_velocity_controller"
  />

  <!-- convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
    <param name="robot_description" command="$(find xacro)/xacro.py '$(find andbot_robot)/robot_description/urdf/andbot_ideal.xacro'" />
    <param name="publish_frequency" value="100"/>
    <remap from="/joint_states" to="/andbot/joint_states" />
  </node>

  <node name="gazebo_remap" pkg="andbot_robot" type="gazebo_remap" respawn="false" output="screen"/>

  <node pkg="andbot_robot" type="mybot_odometry" name="mybot_odometry" />	
  <node pkg="andbot_robot" type="mybot_base_controller" name="mybot_base_controller" />	

<!-- send stop cmd when the goal reached -->
  <node pkg="andbot_robot" type="mybot_stop_when_goal_reached" name="mybot_stop_when_goal_reached" />



</launch>
